let data = {
    "script": "this.on({\n    event:\"start-molfar\",\n    callback: () => {\n        console.log(\"start-molfar\")\n        \n        let view = {\n            tagList: selectWidgets(\"9ttfx19bqzm\").getInstance(),\n            tagForm: selectWidgets(\"d8ckunsdkjn\"),\n            filter: selectWidgets(\"0egco9ik7iwe\")\n        }\n        \n        let controller = {\n            \n            getPathByTag: tag => {\n                let parent = _.find(window.molfar.labels, d => d.id == tag.parent)\n                return `${(parent) ? parent.label : \"\"}/${tag.name}`\n            },\n            \n            getTagByPath: path => _.find(window.molfar.labels, d => d.label == path),\n            \n            getChildsByTag: tag => {\n              let chs = window.molfar.labels.filter( d => d.parent == tag.id)\n              return chs.concat( _.flatten(chs.map( d => controller.getChildsByTag(d))))\n            },\n            \n            getTagById: id => _.find(window.molfar.labels, d => d.id == id),\n            \n            updateTagLabel: tag => {\n            \n                tag.label = (tag.parent) ? controller.getTagById(tag.parent).label : \"\"\n                tag.label += \"/\" + tag.name\n            \n                \n            },\n            \n            updateChildsLabel: tag => {\n              let chs = window.molfar.labels.filter( d => d.parent == tag.id)\n              console.log(chs)\n              chs.forEach( t => {\n                  controller.updateTagLabel(t)\n                  controller.updateChildsLabel(t)\n              })    \n            },\n            \n            updateFilter : () => {\n                view.filter.update({\n                    data: { \n                        list:window.molfar.labels.map( d => d.label),\n                        filter: window.molfar.filter.label || []\n                    }\n                },\n                {\n                    override:\"options.data\"\n                })\n            },\n            \n            applyFilter: tags => {\n                controller.updateFilter()\n                tags = tags || window.molfar.filter.label || []\n                if(window.molfar.labels) {\n                    let fiteredTags = window.molfar.labels.filter( tag => {\n                        return !tags.reduce((f,d) => {\n                           return f&&!tag.label.startsWith(d)\n                        }, true)\n                    })\n                    fiteredTags = (fiteredTags.length == 0) ? window.molfar.labels : fiteredTags  \n                    view.tagList.setData(fiteredTags)\n                }\n            },\n            \n            updateForm: () => {\n                    window.molfar.current.label = window.molfar.current.label || \n                        {\n                            id: uuid(),\n                            name:\"\",\n                            path:\"\"\n                        }\n                    let parentTag = _.find(window.molfar.labels, d => d.id == window.molfar.current.label.parent)\n                    \n                    let data = { \n                        tagList:   [\"--root--\"].concat(window.molfar.labels.map( d => d.label)).filter( d => !d.split(\"/\").filter(t=>t).includes(window.molfar.current.label.name)),\n                        label: window.molfar.current.label,\n                        parentLabel: (parentTag) ? parentTag.label : \"\"\n                                \n                    } \n                    setTimeout(() => {\n                        view.tagForm.update({data},{override:\"options.data\"})    \n                    }, 10)\n        \n            },\n            \n            applyTag: () => {\n                let tag = view.tagForm.getInstance().options.data.label\n                let parentLabel = view.tagForm.getInstance().options.data.parentLabel\n                tag.parent = _.find(window.molfar.labels, d => d.label == parentLabel)\n                tag.parent = (tag.parent) ? tag.parent.id : undefined\n                console.log(tag)\n                let index = _.findIndex(window.molfar.labels, d => d.id == tag.id)\n                if(index >= 0 ){\n                    window.molfar.labels[index] = tag\n                    controller.updateTagLabel(tag)\n                    controller.updateChildsLabel(tag)\n                } else {\n                    window.molfar.labels.push(tag)\n                    controller.updateTagLabel(tag)\n                }\n                \n                window.molfar.current.label = tag\n                controller.applyFilter()\n                controller.updateForm()\n            },\n            \n            cancelTag: () => {\n                let tag = window.molfar.current.label\n                tag = _.find(window.molfar.labels, d => d.id == tag.id)\n                window.molfar.current.label = _.extend({},tag)\n                controller.updateForm()\n            },\n            \n            removeTag: () => {\n                let tag = window.molfar.current.label\n                let deletation = [tag].concat(controller.getChildsByTag(tag)).map( d => d.label)\n                console.log(deletation)\n                _.remove(window.molfar.labels, t => deletation.includes(t.label))\n                window.molfar.current.label = undefined\n                controller.applyFilter()\n                controller.updateForm()\n            }\n        }\n        \n        \n        controller.applyFilter()\n        controller.updateForm()\n        \n        \n        this.on({\n            event:\"select-tag\",\n            callback: (sender, data) => {\n                window.molfar.current.label = _.extend({},_.find(window.molfar.labels, d => d.id == data.data.id))\n                console.log(window.molfar.current.label)\n                controller.updateForm()\n            }\n        })\n        \n        this.on({\n            event: \"create-label\",\n            callback: () => {\n                window.molfar.current.label = undefined\n                controller.updateForm()\n            }\n            \n        })\n        \n        this.on({\n            event: \"apply-tag\",\n            callback: () => {\n                controller.applyTag()\n            }\n        })\n        \n        this.on({\n            event: \"cancel-tag\",\n            callback: () => {\n                controller.cancelTag()\n            }\n        })\n        \n        this.on({\n            event: \"remove-tag\",\n            callback: () => {\n                controller.removeTag()\n            }\n        })\n        \n        this.on({\n        event:\"set-filter\",\n        callback: (sender,data) => {\n            data = data || []\n            window.molfar.filter.label = data\n            controller.applyFilter()    \n        }        \n    })\n\n    }\n})  "
}

console.log(data.script)